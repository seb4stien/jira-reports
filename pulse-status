#!/usr/bin/env python3

import click
import json
import os
import pytz
import requests
from pathlib import Path
from collections import defaultdict
from datetime import datetime
from loguru import logger


# Constants
JIRA_BASE_URL = os.environ["JIRA_BASE_URL"]
JIRA_PROJECT = os.environ["JIRA_PROJECT"]
API_TOKEN = os.environ["JIRA_API_TOKEN"]
EMAIL = os.environ["JIRA_EMAIL"]
CACHE_FILE = ".jira_cache.json"
CONFIG_FILE = "config.json"

logger.add("pulse-status.log", format="[{time}] {level} {message}", level="DEBUG")


#
# Simple cache to speed up iterating on message formating
#
class Cache:
    def __init__(self, cache_path):
        cache = {}
        if os.path.exists(cache_path):
            try:
                with open(cache_path, "r") as f:
                    logger.warning(
                        "Using data from cache {cache_path}. Don't forget to update it."
                    )
                    cache = json.load(f)
            except json.JSONDecodeError:
                raise ValueError(f"Invalid cache file: {cache_path}")

        self._cache = cache

    def __getitem__(self, key):
        return self._cache[key]

    def __setitem__(self, key, value):
        self._cache[key] = value

    def __contains__(self, key):
        return key in self._cache

    def save_on_disk(self):
        with open(CACHE_FILE, "w") as f:
            json.dump(self._cache, f)


# /Cache


#
# Jira helpers
#
class Jira:
    def __init__(self):
        self.cache = Cache(".jira_cache.json")

    @staticmethod
    def parse_jira_timestamp(timestamp: str) -> datetime:
        """Parses a JIRA timestamp in 'YYYY-MM-DDTHH:MM:SS.sssZ' format into a datetime object."""
        return datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%f%z")

    def get_issue(self, issue_key):
        """Fetch issue details from Jira"""
        if issue_key in self.cache:
            return self.cache[issue_key]

        url = f"{JIRA_BASE_URL}/rest/api/3/issue/{issue_key}"
        response = requests.get(
            url, auth=(EMAIL, API_TOKEN), headers={"Accept": "application/json"}
        )
        response.raise_for_status()
        self.cache[issue_key] = response.json()
        return self.cache[issue_key]

    def search_issues(self, jql_query):
        """Fetch issues based on a JQL query"""
        if jql_query in self.cache:
            return self.cache[jql_query]

        url = f"{JIRA_BASE_URL}/rest/api/3/search"
        params = {
            "jql": jql_query,
            "fields": "summary,issuetype,assignee,status,parent,resolutiondate",
        }
        response = requests.get(
            url,
            auth=(EMAIL, API_TOKEN),
            headers={"Accept": "application/json"},
            params=params,
        )
        response.raise_for_status()
        self.cache[jql_query] = response.json()["issues"]
        return self.cache[jql_query]

    def get_issues_attached_to_epic(self, epic_key):
        """Fetch issues linked to an epic"""
        jql_query = f'"Epic Link" = {epic_key}'
        return self.search_issues(jql_query)

    def get_assignee(self, issue):
        """Get the assignee of an issue"""
        return (
            issue["fields"]["assignee"]["displayName"]
            if issue["fields"]["assignee"]
            else "not assigned yet"
        )

    def issue_markdown(self, issue):
        """Generate a markdown link to Jira with the Jira emoticon"""
        icon = ""
        if issue["fields"]["issuetype"]["name"] == "Objective":
            icon = ":jira-objective:"
        elif issue["fields"]["issuetype"]["name"] == "Epic":
            icon = ":jira-epic:"
        elif issue["fields"]["issuetype"]["name"] == "Story":
            icon = ":jira-story:"
        elif issue["fields"]["issuetype"]["name"] == "Task":
            icon = ":jira-task:"
        elif issue["fields"]["issuetype"]["name"] == "Spike":
            icon = ":jira-spike:"
        elif issue["fields"]["issuetype"]["name"] == "Bug":
            icon = ":jira-bug:"
        elif issue["fields"]["issuetype"]["name"] == "Sub-task":
            icon = ":jira-sub-task:"
        else:
            raise ValueError(
                f"Unsupported issue type: {issue['fields']['issuetype']['name']}"
            )

        assignee = self.get_assignee(issue)

        md = f"[{icon}]({JIRA_BASE_URL}/browse/{issue['key']}) {issue['fields']['summary']}"
        if assignee:
            md += f" (*{assignee}*)"
        return md

    def save_cache(self):
        self.cache.save_on_disk()


def is_status_valid(status):
    """Check if the status is valid (not 'Done' or 'Untriaged')"""
    return status not in ["Done", "Untriaged", "Rejected"]


# /Jira helpers


#
# Application
#


def generate_markdown_table(data):
    """Generate a markdown table from the collected data"""
    if not data:
        return "No issues found."

    n = 0
    output = ""

    for objective, epics in data.items():
        output += f"- {objective}"
        for epic, issues in epics.items():
            n += len(issues)
            if len(issues) == 1:
                if len(epics) == 1:
                    output += f" / {epic} / {issues[0]}\n"
                else:
                    output += f"\n  - {epic} / {issues[0]}\n"
            else:
                output += "\n"
                if len(epics) > 1:
                    output += f"  - {epic}\n"
                for issue in issues:
                    output += f"    - {issue}\n"

    return n, output


def collect_issues(done_since: datetime = None):
    """Collect and organize all issues"""

    jira = Jira()

    in_review = defaultdict(lambda: defaultdict(list))
    in_progress = defaultdict(lambda: defaultdict(list))
    triaged = defaultdict(lambda: defaultdict(list))
    done = defaultdict(lambda: defaultdict(list))
    flat = []

    objectives = [
        o["key"]
        for o in jira.search_issues(
            f"project = '{JIRA_PROJECT}' AND type = 'Objective' AND status = 'In Progress'"
        )
    ]

    for objective_key in objectives:
        logger.debug(f"Processing objective {objective_key}")
        objective_issue = jira.get_issue(objective_key)
        objective_title = jira.issue_markdown(objective_issue)

        epic_issues = jira.search_issues(f"'parent' = {objective_key}")

        for epic in epic_issues:
            logger.debug(f"  Processing epic {epic['key']}")
            if not is_status_valid(epic["fields"]["status"]["name"]):
                logger.debug(f"  Skipping epic {epic['key']}")
                continue

            epic_key = epic["key"]
            epic_title = jira.issue_markdown(epic)

            linked_issues = jira.get_issues_attached_to_epic(epic_key)

            for issue in linked_issues:
                logger.debug(f"    Processing issue {issue['key']}")
                issue_status = issue["fields"]["status"]["name"].lower()

                if not is_status_valid(issue_status):
                    logger.debug(f"    Skipping {issue['key']}")
                    continue

                issue_title = jira.issue_markdown(issue)
                if issue_status in ["in review", "to be deployed"]:
                    logger.debug(f"      Issue {issue['key']} in review")
                    in_review[objective_title][epic_title].append(issue_title)
                elif issue_status == "in progress":
                    logger.debug(f"      Issue {issue['key']} in progress")
                    in_progress[objective_title][epic_title].append(issue_title)
                elif issue_status == "triaged":
                    logger.debug(f"     Issue {issue['key']} triaged")
                    triaged[objective_title][epic_title].append(issue_title)
                elif issue_status == "done":
                    logger.debug(f"     Issue {issue['key']} done")
                    resolution_date = issue["fields"]["resolutiondate"]
                    resolution_date = jira.parse_jira_timestamp(resolution_date)
                    if done_since and (resolution_date >= done_since):
                        done[objective_title][epic_title].append(issue_title)
                elif issue_status in ["rejected", "untriaged"]:
                    pass
                else:
                    print(f"Unknown status: {issue_status}")

                flat.append(issue)

    jira.save_cache()

    return in_review, in_progress, triaged, done, flat


def load_config():
    config_file = Path(CONFIG_FILE)
    if not config_file.exists():
        print(f"You need a {CONFIG_FILE}.")
        exit(1)

    return json.load(config_file.open())


#
# CLI
#


@click.group
def cli():
    pass


@cli.command
def planning():
    """Generate a markdown message with planned work."""

    config = load_config()

    try:
        in_review, in_progress, triaged, done, flat = collect_issues()

        msg = config["intro"]

        msg += config["in_review"]
        n_review, txt = generate_markdown_table(in_review)
        msg += txt

        msg += config["in_progress"]
        n_progress, txt = generate_markdown_table(in_progress)
        msg += txt

        msg += config["triaged"]
        n_triaged, txt = generate_markdown_table(triaged)
        msg += txt

        print(msg)

        print(
            f"{n_review} in review + {n_progress} in progress + {n_triaged} triaged = {n_review + n_progress + n_triaged} issues"
        )

    except requests.exceptions.RequestException as e:
        print(f"Error communicating with Jira API: {e}")


@cli.command()
@click.option("-s", "--since", type=click.DateTime(formats=["%d-%m-%Y"]), required=True)
def retro(since):
    """Generate a markdown message with Done work."""
    jira = Jira()

    since = since.replace(tzinfo=pytz.utc)
    _, _, _, done, flat = collect_issues(since)
    n_done, txt = generate_markdown_table(done)

    print(txt)
    print("We also completed the following tasks:")
    flat_keys = [issue["key"] for issue in flat]
    jira_date = since.strftime("%Y-%m-%d")
    non_objective_done = jira.search_issues(
        f"project = {JIRA_PROJECT} and resolution IS NOT EMPTY AND resolved >= '{jira_date}' AND resolution = Done"
    )
    for issue in non_objective_done:
        key = issue["key"]
        if key not in flat_keys:
            issue_title = jira.issue_markdown(issue)
            print(f"- {issue_title}")
    print(f"Done: {n_done} issues")

    jira.save_cache()


if __name__ == "__main__":
    cli()
